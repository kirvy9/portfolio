{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 2, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "@pytest.fixture(scope=\"function\")\n    def driver():\n        chrome_options = Options()\n    \n        # \ud83c\udf1f \uc131\ub2a5 \ucd5c\uc801\ud654 \uc635\uc158 \ucd94\uac00\n        chrome_options.add_argument(\"--disable-extensions\")  # \ud655\uc7a5 \ud504\ub85c\uadf8\ub7a8 \ube44\ud65c\uc131\ud654\n        chrome_options.add_argument(\"--disable-popup-blocking\")  # \ud31d\uc5c5 \ucc28\ub2e8 \ud574\uc81c\n        chrome_options.add_argument(\"--disable-gpu\")  # GPU \uac00\uc18d \ube44\ud65c\uc131\ud654 (\ub9ac\uc18c\uc2a4 \uc808\uc57d)\n        # chrome_options.add_argument(\"--headless\")  # GUI \uc5c6\uc774 \uc2e4\ud589 (\uc820\ud0a8\uc2a4\uc6a9)\n        chrome_options.add_argument(\"--no-sandbox\")  # \uc0cc\ub4dc\ubc15\uc2a4 \ube44\ud65c\uc131\ud654 (\uc18d\ub3c4 \ud5a5\uc0c1)\n        chrome_options.add_argument(\"--disable-dev-shm-usage\")  # /dev/shm \uc0ac\uc6a9 \ud574\uc81c (\uba54\ubaa8\ub9ac \ucd5c\uc801\ud654)\n        chrome_options.add_argument(\"--remote-debugging-port=9222\")  # \ub514\ubc84\uae45 \ud3ec\ud2b8 \uc124\uc815\n        chrome_options.add_argument(\"--log-level=3\")  # \ub85c\uadf8 \ub808\ubca8 \ub0ae\ucdb0 \ubd88\ud544\uc694\ud55c \ucd9c\ub825 \uc904\uc774\uae30\n        chrome_options.add_argument(\"--window-size=1920,1080\")  # \ucc3d \uc0ac\uc774\uc988 \uc870\uc808\n        chrome_options.page_load_strategy = \"eager\"  # \ube60\ub978 \ud398\uc774\uc9c0 \ub85c\ub4dc\n    \n        # webdriver-manager\ub97c \ud1b5\ud574 \uc790\ub3d9\uc73c\ub85c chromedriver \uc124\uce58 \ubc0f \uacbd\ub85c \uc124\uc815\n        service = Service(ChromeDriverManager().install())\n        driver = webdriver.Chrome(service=service, options=chrome_options)\n>       driver = webdriver.Chrome(service=Service(\"C:/Users/user/Downloads/chromedriver-win64/chromedriver.exe\"), options=chrome_options)\n\ntests\\conftest.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:250: in __init__\n    self.start_session(capabilities)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:342: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002B53785EE90>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom disconnected: ...4E67BA39+4825]\\\\n\\\\tBaseThreadInitThunk [0x00007FFEB3CE7374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFEB5CFCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from disconnected: unable to connect to renderer\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF64E68CF25+75717]\nE       \tGetHandleVerifier [0x00007FF64E68CF80+75808]\nE       \t(No symbol) [0x00007FF64E458F9A]\nE       \t(No symbol) [0x00007FF64E49C92B]\nE       \t(No symbol) [0x00007FF64E496C04]\nE       \t(No symbol) [0x00007FF64E491ADD]\nE       \t(No symbol) [0x00007FF64E4E52D8]\nE       \t(No symbol) [0x00007FF64E4E48B0]\nE       \t(No symbol) [0x00007FF64E4D7153]\nE       \t(No symbol) [0x00007FF64E4A0421]\nE       \t(No symbol) [0x00007FF64E4A11B3]\nE       \tGetHandleVerifier [0x00007FF64E98D6FD+3223453]\nE       \tGetHandleVerifier [0x00007FF64E987CA2+3200322]\nE       \tGetHandleVerifier [0x00007FF64E9A5AD3+3322739]\nE       \tGetHandleVerifier [0x00007FF64E6A69FA+180890]\nE       \tGetHandleVerifier [0x00007FF64E6AE0FF+211359]\nE       \tGetHandleVerifier [0x00007FF64E695274+109332]\nE       \tGetHandleVerifier [0x00007FF64E695422+109762]\nE       \tGetHandleVerifier [0x00007FF64E67BA39+4825]\nE       \tBaseThreadInitThunk [0x00007FFEB3CE7374+20]\nE       \tRtlUserThreadStart [0x00007FFEB5CFCC91+33]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: SessionNotCreatedException\n", "test_name": "test_ts002_follow_user", "rerun": "0"}, "1": {"status": "SKIP", "message": "('C:\\\\Users\\\\user\\\\Desktop\\\\2\ucc28 \ud504\ub85c\uc81d\ud2b8\\\\team02-dev\\\\tests\\\\test_social.py', 130, 'Skipped: \uc544\uc9c1 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4 \ubc1c\ub3d9 \uc548\ud568')\n", "test_name": "test_ts003_unfollow_user", "rerun": "0"}, "2": {"status": "SKIP", "message": "('C:\\\\Users\\\\user\\\\Desktop\\\\2\ucc28 \ud504\ub85c\uc81d\ud2b8\\\\team02-dev\\\\tests\\\\test_social.py', 280, 'Skipped: \uc544\uc9c1 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4 \ubc1c\ub3d9 \uc548\ud568')\n", "test_name": "test_ts004_favorite_article_and_verify_in_profile", "rerun": "0"}}, "suite_name": "tests/test_social.py"}}}, "date": "May 13, 2025", "start_time": 1747068132.6911397, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "2", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "3"}